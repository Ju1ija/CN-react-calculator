{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Button","props","id","idName","onClick","onClickEvent","icon","App","useState","input","setInput","isResultSet","setResultState","inputHandler","char","deleteHandler","setValidatedInput","val","test","isMathOp","lastCharOf","slice","includes","str","length","className","type","onChange","e","target","value","placeholder","autocomplete","map","result","Number","evaluate","toFixed","resultHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAiFA,IAAMA,EAAS,SAACC,GACd,OAAO,wBAAQC,GAAID,EAAME,OAAQC,QAASH,EAAMI,aAAzC,SAAwDJ,EAAMK,QAGxDC,EAjFf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAGMC,EAAe,SAACC,GACP,QAATA,EACFC,EAAcN,GAEdO,EAAkBP,EAAQK,IAIxBE,EAAoB,SAACC,GACX,qBACaC,KAAKD,KAEzBN,EAEMQ,EAASC,EAAWH,KAA4B,KAAnBG,EAAWH,IACjDP,EAASO,GACTL,GAAe,KAEfF,EAASU,EAAWH,IACpBL,GAAe,IANfF,EAASO,KAmBTF,EAAgB,SAACE,GAEnBP,EADiB,kBAARO,EACAA,EAAII,MAAM,GAAI,GAEd,KAIPF,EAAW,SAACL,GAAD,MAAU,OAAOQ,SAASR,IACrCM,EAAa,SAACG,GAAD,OAASA,EAAIA,EAAIC,OAAS,IAE7C,OACE,sBAAKC,UAAU,aAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,uBAAOC,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAOZ,EAAkBY,EAAEC,OAAOC,QAAQC,YAAY,IAAIC,aAAa,MAAMF,MAAOrB,MAEnH,sBAAKgB,UAAU,kBAAf,UACE,gCACE,sBAAKA,UAAU,eAAf,UACE,cAAC,EAAD,CAAQnB,KAAK,IAAIH,OAAO,eAAeE,aAAc,kBAAMK,EAAS,OACpE,cAAC,EAAD,CAAQJ,KAAK,IAAID,aAAc,kBAAMQ,EAAa,WAEpD,qBAAKY,UAAU,gBAAf,SAxDQ,CAAC,IAAK,IAAK,MAAO,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAyDvDQ,KAAI,SAAC3B,GACZ,OAAO,cAAC,EAAD,CAAQA,KAAMA,EAAMD,aAAc,kBAAMQ,EAAaP,cAIlE,sBAAKmB,UAAU,iBAAf,UACE,cAAC,EAAD,CAAQnB,KAAK,IAAIH,OAAO,QAAQE,aAAc,kBArChC,SAACY,GACrB,IAAKE,EAASC,EAAWH,KAAiB,KAARA,EAAY,CAC5C,IAAMiB,EAASC,OAAOC,YAASnB,GAAKoB,QAAQ,IAC5C3B,EAASwB,GACTtB,GAAe,IAiCyC0B,CAAc7B,MAClE,cAAC,EAAD,CAAQH,KAAK,IAAID,aAAc,kBAAMQ,EAAa,QAClD,cAAC,EAAD,CAAQP,KAAK,IAAID,aAAc,kBAAMQ,EAAa,QAClD,cAAC,EAAD,CAAQP,KAAK,OAASD,aAAc,kBAAMQ,EAAa,QACvD,cAAC,EAAD,CAAQP,KAAK,OAASD,aAAc,kBAAMQ,EAAa,kBC9DlD0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.99cfc559.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { evaluate } from 'mathjs';\nimport './App.css';\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [isResultSet, setResultState] = useState(false);\n  const buttons = [\"0\", \".\", \"DEL\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n\n  const inputHandler = (char) => {\n    if (char === \"DEL\") {\n      deleteHandler(input);\n    } else {\n      setValidatedInput(input + char);\n    }\n  }\n\n  const setValidatedInput = (val) => {\n    const regex = /(\\d+[%]?[+-/*]?)+$/;\n    const isInputValid = regex.test(val);\n    if (isInputValid) {\n      if (!isResultSet) {\n        setInput(val);\n      } else if (isMathOp(lastCharOf(val)) || lastCharOf(val) == \"%\") {\n        setInput(val);\n        setResultState(false);\n      } else {\n        setInput(lastCharOf(val));\n        setResultState(false);\n      }\n    }\n  }\n\n  const resultHandler = (val) => {\n    if (!isMathOp(lastCharOf(val)) && val !== \"\") {\n      const result = Number(evaluate(val).toFixed(3));\n      setInput(result);\n      setResultState(true);\n    }\n  }\n\n  const deleteHandler = (val) => {\n    if (typeof val === \"string\") {\n      setInput(val.slice(0, -1));\n    } else {\n      setInput(\"\");\n    }\n  }\n\n  const isMathOp = (char) => \"+-*/\".includes(char);\n  const lastCharOf = (str) => str[str.length - 1];\n\n  return (\n    <div className=\"calculator\">\n      <div className=\"input-section\">\n        <input type=\"text\" onChange={(e) => setValidatedInput(e.target.value)} placeholder=\"0\" autocomplete=\"off\" value={input} />\n      </div>\n      <div className=\"buttons-section\">\n        <div>\n          <div className=\"grey-section\">\n            <Button icon=\"C\" idName=\"reset-button\" onClickEvent={() => setInput(\"\")} />\n            <Button icon=\"%\" onClickEvent={() => inputHandler(\"%\")} />\n          </div>\n          <div className=\"white-section\">\n            {buttons.map((icon) => {\n              return <Button icon={icon} onClickEvent={() => inputHandler(icon)} />\n            })}\n          </div>\n        </div>\n        <div className=\"orange-section\">\n          <Button icon=\"=\" idName=\"equal\" onClickEvent={() => resultHandler(input)} />\n          <Button icon=\"+\" onClickEvent={() => inputHandler(\"+\")} />\n          <Button icon=\"-\" onClickEvent={() => inputHandler(\"-\")} />\n          <Button icon=\"&#215;\" onClickEvent={() => inputHandler(\"*\")} />\n          <Button icon=\"&#247;\" onClickEvent={() => inputHandler(\"/\")} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst Button = (props) => {\n  return <button id={props.idName} onClick={props.onClickEvent}>{props.icon}</button>\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}